# Создать образ на основе базового слоя,
# который содержит файлы ОС и интерпретатор Python 3.9.
FROM python:3.9

# Переходим в образе в директорию /app: в ней будем хранить код проекта.
# Если директории с указанным именем нет, она будет создана. 
# Название директории может быть любым.
WORKDIR /app
# Дальнейшие инструкции будут выполняться в директории /app

# Cистемные зависимости в образе лучше устанавливать до копирования файлов приложения.
# Добавьте команду установки gunicorn в Dockerfile приложения backend;
# эта команда должна стоять раньше команды копирования файла requirements.txt
RUN pip install gunicorn==20.1.0

# Скопировать с локального компьютера файл зависимостей
# в текущую директорию (текущая директория — это /app).
COPY requirements.txt .

# Выполнить в текущей директории команду терминала
# для установки зависимостей.
# Если не использовать параметр --no-cache-dir, 
# то pip сохранит в служебной директории (прямо в образе) копии пакетов,
# а это будет лишним грузом.
RUN pip install -r requirements.txt --no-cache-dir

# В образе нет нужной утилиты? Ок, установим её!
# Обратите внимание: sudo тут не нужен, так как внутри контейнера
# все команды выполняются от имени root
# RUN apt-get -y install python3-pip
# Вот теперь можно обратиться к pip...
# RUN pip install -r /app/requirements.txt --no-cache-dir
# ...и команда выполнится без ошибок. 

# Скопировать всё необходимое содержимое 
# той директории локального компьютера, где сохранён Dockerfile,
# в текущую рабочую директорию образа — /app.
COPY . .

# При старте контейнера запустить сервер разработки.
# Инструкция CMD в вашем Dockerfile запустит
#  веб-сервер разработки Django-приложения внутри контейнера
# CMD ["python", "manage.py", "runserver", "0:8000"] 
# У инструкции CMD есть три особенности:
# в Dockerfile срабатывает только одна инструкция CMD. 
# Если этих инструкций несколько, выполнится только та, что записана последней;
# параметры инструкции CMD указываются в виде JSON-массива, 
# элементы массива заключаются в двойные кавычки;
# первым элементом указывается исполняемый файл, 
# например, интерпретатор Python; следом указываются 
# параметры для запуска исполняемого файла

# Описание инструкций докерфайла есть в официальной документации на docs.docker.com. 
# Там же описан и файл .dockerignore.

# Сервер установлен; при старте контейнера его нужно запустить. 
# В команде, запускающей сервер, нужно указать номер порта и приложение, 
# которое должен обслуживать gunicorn. Измените инструкцию CMD:
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "backend.wsgi"] 
# Ключ --bind 0.0.0.0:8000 привяжет приложение Taski к порту 8000, 
#доступному извне, — стандартная привязка к 127.0.0.1:8000 не сработает,
# так как обращение к контейнеру с хоста не считается локальным.
# Теперь при старте докер-контейнера будет запущен Gunicorn; 
# приложение из Python-пакета backend.wsgi (WSGI-приложение Taski) 
# будет привязано к порту контейнера 8000.