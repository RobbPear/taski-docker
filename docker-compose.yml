# Файл docker-compose.yml

# Версия docker-compose
version: '3'

# Перечень volume
volumes:
  pg_data:
  # Новый volume — для статических файлов
  static:

# Перечень контейнеров
services:
  # Имя и описание первого контейнера; имя выбирает разработчик. 
  # Это контейнер БД
  db:
    # Из какого образа запустить контейнер:
    image: postgres:13.10
    # Файл (или список файлов) с переменными окружения
    env_file: .env
    # Какой volume подключить для этого контейнера
    volumes:
      - pg_data:/var/lib/postgresql/data
  # Имя и описание контейнера с бэкендом
  backend:
    # Из какого Dockerfile собирать образ для этого контейнера:
    build: ./backend/
    env_file: .env
    # Тут подключаем volume к backend
    volumes:
      - static:/backend_static
    # Какие контейнеры нужно запустить до старта этого контейнера:
    # depends_on:
    #   - db
  # Имя третьего контейнера. Это контейнер с фронтендом
  frontend:
    env_file: .env
    build: ./frontend/ 
    # command — аналог инструкции CMD в докерфайле: здесь пишется команда, которая 
    # должна быть выполнена после запуска контейнера. Команда, указанная под ключом
    # command, переопределяет инструкцию CMD в докерфайле, заменяет её.
    command: cp -r /app/build/. /frontend_static/ # выполнить команду копирования файлов
    volumes:
      - static:/frontend_static
    
    # Чтобы контейнер с Nginx появился в «оркестре», включим описание контейнера
    # в файл docker-compose.yml
    # Добавляем новый контейнер: gateway.
  gateway:
    # Сбилдить и запустить образ, 
    # описанный в Dockerfile в папке gateway
    build: ./gateway/
     # А тут подключаем volume со статикой к gateway
    volumes:
      - static:/staticfiles/
    # Ключ ports устанавливает
    # перенаправление всех запросов с порта 8000 хоста
    # на порт 80 контейнера.
    ports:
      - 8000:80

# Все контейнеры, описанные в docker-compose.yml, будут запущены в 
# сети (Docker network). Эту сеть Docker Compose создаст автоматически,
#  описывать её в конфиге необязательно.

# Что внутри docker-compose.yml
# version — версия спецификации файла docker-compose.yml. Обязательный параметр. От версии к версии набор доступных команд меняется, и какие-то команды из новых версий могут не поддерживаться старыми версиями Docker Compose. Узнать, какая версия Docker Compose установлена на компьютере, можно с помощью команды docker compose version.
# В документации описано соответствие версий Docker Compose версиям файла docker-compose.yml. Версии Docker Compose 1.10 и выше вполне подойдут для дальнейшей работы.
# volumes — перечень volumes для докера, необязательный параметр. Для каждого имени volume через двоеточие можно указать его подробные настройки. Их можно и не указывать — докер применит настройки по умолчанию.
# services — названия и описания контейнеров, которые должны быть запущены. В листинге описаны три контейнера: db, backend и frontend. 
# Ключи в конфигурации можно указывать в любом порядке. В примере сначала указаны volumes, а потом services: при описании контейнеров удобнее видеть, какие volumes уже созданы.
# Описание каждого контейнера — это YAML-словарь, значения в этом словаре похожи на параметры запуска, которые вы применяли при ручном старте контейнеров. Вот она, автоматизация!
# В описании контейнера объявляется:
# image или build: <address> (одно из двух):
# image — из какого образа создать и запустить контейнер;
# build: <address> — создать образ из докерфайла, который лежит в директории <address>, и запустить контейнер из этого образа.
# volumes — список подключаемых к контейнеру volumes:
#   volumes:
#     - имя_volume:директория_контейнера
   
# Другой распространённый вариант — просто указать директорию контейнера, для которой будет создан volume:
#   volumes:
#     - директория_контейнера
   
# Такой volume называется анонимным volume (у него не будет имени), его не нужно описывать в общем блоке volumes. Остальные способы создания volumes можно посмотреть в документации.
# env_file указывает один или несколько файлов с переменными окружения для контейнера.
# depends_on — список контейнеров, которые должны быть запущены перед запуском описываемого контейнера. Значение ключа depends_on — список: иногда запускаемый контейнер зависит не от одного, а от нескольких других контейнеров. В листинге сказано, что контейнер backend должен быть запущен после контейнера db: при старте Django-приложения база данных должна быть уже доступна.

# Дополнительно в depends_on можно указать состояние предыдущего контейнера, при котором можно запустить текущий контейнер, — это описано в документации.

# Чтобы контейнер с Nginx появился в «оркестре», включим описание контейнера 
# в файл docker-compose.yml. А чтобы контейнер с Nginx мог слушать запросы с 
# хоста — нужно назначить соответствие портов контейнера портам хоста, «пробросить порты».
#  Проброс настраивается с помощью ключа ports в описании контейнера в docker-compose.yml.